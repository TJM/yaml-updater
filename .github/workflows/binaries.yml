name: Publish native binaries

on:
  pull_request:
  push:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build:
    name: Build ${{ matrix.artifact }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact: yaml-updater.exe
            os: windows-latest
            build: yaml-config-updater-cli/build/graal/yaml-config-updater-cli.exe
            experimental: true
          - artifact: yaml-updater-mac-amd64
            os: macos-latest
            build: yaml-config-updater-cli/build/graal/yaml-config-updater-cli
          - artifact: yaml-updater-linux-amd64
            os: ubuntu-latest
            build: yaml-config-updater-cli/build/graal/yaml-config-updater-cli
            publishJar: true # all builds are producing this jar

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental || false }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Setup MS dev tools
        if: contains(matrix.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1.10.0

      - name: Setup MS VS tools
        if: contains(matrix.os, 'windows')
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64

      - name: Build
        id: build
        shell: bash
        run: |
          if [ -n "${{ matrix.publishJar }}" ]; then
            BUILD_TARGET=":yaml-config-updater-cli:shadowJar :yaml-config-updater-cli:nativeImage"
          else
            BUILD_TARGET=":yaml-config-updater-cli:nativeImage"
          fi
          chmod +x gradlew
          ./gradlew ${BUILD_TARGET} --no-daemon
          ## Rename files
          mkdir upload
          cp ${{ matrix.build }} upload/${{ matrix.artifact }}
          echo "::set-output name=binary::upload/${{ matrix.artifact }}"
          if [ -n "${{ matrix.publishJar }}" ]; then
            cp yaml-config-updater-cli/build/libs/*-all.jar upload/yaml-updater.jar
            echo "::set-output name=jarFile::upload/yaml-updater.jar"
          fi

      - name: Run UPX
        if: "! contains(matrix.artifact, 'mac')"
        uses: crazy-max/ghaction-upx@v1.4.0
        continue-on-error: true
        with:
          version: latest
          files: ${{ steps.build.outputs.binary }}
          args: "--lzma --best"

      - name: Quick Test
        run: ./${{ steps.build.outputs.binary }} --version

      - name: Publish ${{ matrix.artifact }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact }}
          path: ${{ steps.build.outputs.binary }}

      - name: Publish JAR
        uses: actions/upload-artifact@v2
        if: matrix.publishJar
        with:
          name: yaml-updater.jar
          path: ${{ steps.build.outputs.jarFile }}

  publish:
    runs-on: ubuntu-latest
    if: github.event.release.tag_name
    strategy:
      fail-fast: false
      matrix:
        artifact:
          - yaml-updater.exe
          - yaml-updater-mac-amd64
          - yaml-updater-linux-amd64
          - yaml-updater.jar
    needs: [build]
    steps:
      - run: mkdir -p tmp
      - name: Download artifact ${{ matrix.artifact }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact }}
          path: tmp

      - name: Upload ${{ matrix.artifact }}
        if: ${{ github.event_name == 'release' }}
        uses: JasonEtco/upload-to-release@master
        with:
          args: tmp/${{ matrix.artifact }} application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dockerImage:
    strategy:
      fail-fast: false
      matrix:
        artifact: [yaml-updater-linux-amd64]

    runs-on: ubuntu-latest
    needs: [build]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - run: mkdir -p tmp

      - name: Download artifact ${{ matrix.artifact }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact }}
          path: tmp

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          # push: ${{ startsWith(github.event.release.tag_name, 'v') }} # only push on tagged releases that start with "v"
          push: true # always push - makes debugging faster/easier
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
